@page "/R_Produccion"
@page "/R_Produccion/{ProducidoId:int}"


@inject ProducidoBLL producidos
@inject ProductoBLL productos
@inject NotificationService notificaciones



<PageTitle>Registro de produccion.</PageTitle>

<body>
    <EditForm model ="producido">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
            <div class="container">
                <div class ="card text-dark bg-light mb-3 shadow-lg">
                    <div class="card-header">
                        <h3>Entrada de productos empacados</h3>
                    </div>
                    @* IdProduccido *@
                    <div class ="card-body">
                        <div class="row">
                            <div class ="col-4">
                                <label for="ProducidoId">ProducidoId:</label>
                                <div class ="input-group">
                                    <input @bind-value="producido.ProducidoId"type ="text" id="ProducidoId" class="form-control"/>
                                    <button type="button" class="btn btn-dark" @onclick="Buscar"><i class="oi oi-magnifying-glass"/>Buscar</button>
                                </div>
                            </div>
                        </div>
                        @* Fecha del producto producido *@
                        <div class="row">
                            <div class ="col-3">
                                <label for="Fecha">Fecha:</label>
                                <input disabled ="true" @bind-value="producido.Fecha"type="date" class="form-control" id="Fecha" />
                            </div>
                            
                        </div>
                        @* Concepto del producito producido que sera el nuevo producto *@
                        <div class="row">
                            <div class ="col-6">
                                <label for="Concepto">Concepto:</label>
                                <input @bind-value="producido.Concepto" type="text" class ="form-control" id ="Concepto">
                            </div>
                        </div>
                        <hr>
                        @* Fieldset con las especificaciones del detalle *@
                        <fieldset>
                            <legend>Utilizados:</legend>
                            <div class="row">
                                <div class="col-4">
                                    <label for="SelectP">Producto:</label>
                                    <select @bind ="detalle.ProductoId"class="form-select">
                                        @foreach(var item in productos.GetList())
                                        {
                                            <option value="@item.ProductoId">@item.Descripcion</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-4">
                                    <label for="CantidadP">Cantidad:</label>
                                    <div class="input-group">
                                        <input @bind-value ="detalle.Cantidad" type="Text" id="CantidadP"class="form-control"/>
                                        <button type="button" class="btn btn-dark" @onclick="AgregarDetalle">Agregar <i class="oi oi-plus"/></button>
                                    </div>
                                    
                                </div>
                            </div>
                            @* Tabla de los productos que se utilizaran para formar el nuevo *@
                            <table class ="table">
                                <thead>
                                    <tr>
                                        <th>ProductoId</th>
                                        <th>Descripcion</th>
                                        <th>Cantidad</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in this.producido.ProducidoDetalle)
                                    {
                                        <tr>
                                            <td>@item.ProductoId</td>
                                            <td>@productos.Buscar(item.ProductoId)?.Descripcion</td>
                                            <td>@item.Cantidad</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <hr>
                            @* Cantidad total de los productos utilizados para realizar en nuevo *@
                            <div class="row d-flex justify-content-center">
                                <div class ="col-5">
                                    <label for="Total">Cantidades totales utilizadas:</label>
                                    <input @bind-value="TotalProducido" disabled ="true" type="text" class="form-control"    />
                                </div>
                            </div>
                        </fieldset>
                        <hr>
                        @* Espacio para indicar la cantidad que producida del nuevo producto y la UNIDAD en que se vendera. *@
                        <fieldset>
                            <legend>Producido:</legend>
                            <div class="row">
                                <div class="col-3">
                                    <select  disabled="true" class="form-select">

                                    </select>
                                </div>
                                <div class="col-2">
                                    
                                    <input type="text" class="form-control" placeholder="Cantidad" @bind-value ="producido.cantidad"/>
                                </div>
                            </div>
                        </fieldset>
                        
                    </div>
                    @* Botones (Guardar, Limpiar y Eliminar) *@
                    <div class="card-footer d-flex justify-content-center">
                        <div class="row">
                            <div class="btn-group">
                                <button class="btn btn-dark" type="button" @onclick="Guardar"><i class="oi oi-document"/><b> Guardar</b></button>
                                <button class="btn btn-secondary" type="button"@onclick="Nuevo"><i class="oi oi-file"/><b> Nuevo/Limpiar</b></button>
                                <button class="btn btn-dark" type="button" @onclick="Eliminar"><i class="oi oi-trash"/><b> Eliminar</b></button>
                            </div>
                        </div>
                    </div>

                    
                        
                        
                    


                    
                   


                    
                   
                   
                </div>
            </div>

        

        
        


    </EditForm>
</body>


@code
{
    [Parameter]
    public int ProducidoId {get; set;}

    public Producido producido {get; set;} = new Producido();

    public Producto producto {get; set;} = new Producto();

    public ProducidoDetalle detalle {get; set;} = new ProducidoDetalle();

    public int TotalProducido {get; set;} = 0;

    public List<Producto> L_Producto {get; set;} = new List<Producto>();

    



    protected override void OnInitialized()
    {
        L_Producto = productos.GetList();
        if(ProducidoId > 0)
        {
            this.producido.ProducidoId = ProducidoId;
            this.Buscar();
        }
    }

        
    void Nuevo()
    {
        this.producido = new Producido();
        TotalProducido = 0 ;
        
    }

    void Buscar()
    {
        
        var ProducidoEncontrado= producidos.Buscar(this.producido.ProducidoId);
        Nuevo();

        if(ProducidoEncontrado != null)
        {
            this.producido = ProducidoEncontrado;
            ShowNotification( new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Busqueda completada satisfactoriamente!",
                Detail = "Informacion de una produccion encontrada",
                Duration = 4000

            });

            if(producido.ProducidoDetalle != null)
            {
                Console.WriteLine("Tiene un detalle");
                foreach(var item in producido.ProducidoDetalle)
                {
                    TotalProducido += item.Cantidad;
                }
            }
            else
            {
                Console.WriteLine("Lista de detalle vacia");
            }
        }
    }

    void AgregarDetalle()
    {
        int DetalleTotal = 0;

        if(producido.ProducidoDetalle != null)
        {
            foreach(var item in producido.ProducidoDetalle)
            {
                DetalleTotal += item.Cantidad;
            }
        }
            
        DetalleTotal += this.detalle.Cantidad;
        TotalProducido = DetalleTotal;
        producido.ProducidoDetalle?.Add(this.detalle);
        this.detalle = new ProducidoDetalle();
        
        ShowNotification( new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Registro Actualizado",
                Detail = "Se ha agregado un detalle",
                Duration = 4000

            });

    }

    void Guardar()
    {
        if(Validar())
        {
            producidos.Guardar(this.producido);
            Nuevo();
            ShowNotification( new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Registro Actualizado",
                Detail = "Se ha guardado Correctamente",
                Duration = 4000

            });
        }
        else
        {
            Console.WriteLine("No se guardo nada");
            ShowNotification( new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Registro Actualizado",
                Detail = "Informacion no valida o campos vacios",
                Duration = 4000

            });
        }
    }

    bool Validar()
    {
        return (this.producido.Concepto != null && this.producido.Fecha != null && this.producido.ProducidoDetalle != null && (this.producido.cantidad > 0 && this.producido.cantidad!= null));
    }

    void Eliminar()
    {

        if(Validar())
        {
            if(producidos.Eliminar(this.producido))
            {
                Nuevo();
                ShowNotification( new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Registro Actualizado",
                    Detail = "Borrado correctamente",
                    Duration = 4000

                });
            }
            else
            {
                Console.WriteLine("No se ha borrado nada");
            }
        }
        else
        {
            ShowNotification( new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error al eliminar",
                Detail = "no hay una produccion seleccionada",
                Duration = 4000

            });
        }
        
            
        
    }
    void ShowNotification(NotificationMessage message)
    {
        notificaciones.Notify(message);
    }        

}
    
   





